/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Logbook } from "./Logbook";
import { LogbookCountArgs } from "./LogbookCountArgs";
import { LogbookFindManyArgs } from "./LogbookFindManyArgs";
import { LogbookFindUniqueArgs } from "./LogbookFindUniqueArgs";
import { CreateLogbookArgs } from "./CreateLogbookArgs";
import { UpdateLogbookArgs } from "./UpdateLogbookArgs";
import { DeleteLogbookArgs } from "./DeleteLogbookArgs";
import { LogbookService } from "../logbook.service";
@graphql.Resolver(() => Logbook)
export class LogbookResolverBase {
  constructor(protected readonly service: LogbookService) {}

  async _logbooksMeta(
    @graphql.Args() args: LogbookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Logbook])
  async logbooks(
    @graphql.Args() args: LogbookFindManyArgs
  ): Promise<Logbook[]> {
    return this.service.logbooks(args);
  }

  @graphql.Query(() => Logbook, { nullable: true })
  async logbook(
    @graphql.Args() args: LogbookFindUniqueArgs
  ): Promise<Logbook | null> {
    const result = await this.service.logbook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Logbook)
  async createLogbook(
    @graphql.Args() args: CreateLogbookArgs
  ): Promise<Logbook> {
    return await this.service.createLogbook({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Logbook)
  async updateLogbook(
    @graphql.Args() args: UpdateLogbookArgs
  ): Promise<Logbook | null> {
    try {
      return await this.service.updateLogbook({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Logbook)
  async deleteLogbook(
    @graphql.Args() args: DeleteLogbookArgs
  ): Promise<Logbook | null> {
    try {
      return await this.service.deleteLogbook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
