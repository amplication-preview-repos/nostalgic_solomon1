/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LogEntry as PrismaLogEntry } from "@prisma/client";

export class LogEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LogEntryCountArgs, "select">): Promise<number> {
    return this.prisma.logEntry.count(args);
  }

  async logEntries(
    args: Prisma.LogEntryFindManyArgs
  ): Promise<PrismaLogEntry[]> {
    return this.prisma.logEntry.findMany(args);
  }
  async logEntry(
    args: Prisma.LogEntryFindUniqueArgs
  ): Promise<PrismaLogEntry | null> {
    return this.prisma.logEntry.findUnique(args);
  }
  async createLogEntry(
    args: Prisma.LogEntryCreateArgs
  ): Promise<PrismaLogEntry> {
    return this.prisma.logEntry.create(args);
  }
  async updateLogEntry(
    args: Prisma.LogEntryUpdateArgs
  ): Promise<PrismaLogEntry> {
    return this.prisma.logEntry.update(args);
  }
  async deleteLogEntry(
    args: Prisma.LogEntryDeleteArgs
  ): Promise<PrismaLogEntry> {
    return this.prisma.logEntry.delete(args);
  }
}
